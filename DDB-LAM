import boto3
import json
import random
import logging
import re
from boto3.dynamodb.conditions import Key
import calendar
from datetime import date
import datetime

logger = logging.getLogger()
logger.setLevel(logging.INFO)

def connection(clientname,resourcename,region,access_key=None,secret_key=None,session_token=None):
    if clientname == 'client':
        connection = boto3.client(resourcename, region_name=region,
                             aws_access_key_id=access_key,
                             aws_secret_access_key=secret_key,
                             aws_session_token=session_token)
    elif clientname == 'resource':
        connection = boto3.resource(resourcename, region_name=region,
                             aws_access_key_id=access_key,
                             aws_secret_access_key=secret_key,
                             aws_session_token=session_token)
    else:
        print("error, check client name")
    return connection

def autoscale_instances_list(region,access_key,secret_key,session_token):
    asg_instance_ids=[]
    con_asg_client = connection('client','autoscaling',region,access_key,secret_key,session_token)
    asg_paginator = con_asg_client.get_paginator('describe_auto_scaling_groups')
    auto_scaling_groups = asg_paginator.paginate().build_full_result()
    if len(auto_scaling_groups) > 0:
        for asg in auto_scaling_groups['AutoScalingGroups']:
            asg_instance_ids = [i["InstanceId"] for i in asg['Instances']]
    return asg_instance_ids

def add_item_to_ddb(region,access_key,secret_key,session_token,instanceID,tablename,accountID,account_detail_table):
    dynamodb = connection('resource','dynamodb',region)
    table = dynamodb.Table(tablename)
    conn_ec2_resource = connection('resource','ec2',region,access_key,secret_key,session_token)
    ec2instance = conn_ec2_resource.Instance(instanceID)
    AutoStartTime='NULL'
    AutoStartDays='Mon,Tue,Wed,Thu,Fri,Sat,Sun'
    AutoStopDays='Mon,Tue,Wed,Thu,Fri,Sat,Sun'
    ddb_client = connection('client','dynamodb',region)
    
    ddb_query = ddb_client.query(
            TableName=account_detail_table,
            KeyConditions={
                'AccountID': {
                    'AttributeValueList': [
                        {
                            'S': accountID,
                        },
                    ],
                    'ComparisonOperator': 'EQ'
                }
            }
        )
    
    for i in ddb_query['Items']:
        Accounttype = (i['AccountType']['S'])
        
    if Accounttype == 'Non-Prod':
        #print("its a nonprod")
        AutoStopTime='23:00:00'
    elif Accounttype == 'Prod':
        #print("its a prod account")
        AutoStopTime='NULL'
    else:
        #print("invalid account type")
        AutoStopTime='NULL'
        
    
    
    
    print("tags",ec2instance.tags)
    
    if ec2instance.tags is None:
        #print("no tags in ec2 instance")
        table.put_item(
        Item={
        'AccountID': accountID,
        'InstanceID': instanceID,
        'Region': region,
        'AutoStartTime': AutoStartTime,
        'AutoStartDays': AutoStartDays,
        'AutoStopTime': AutoStopTime,
        'AutoStopDays': AutoStopDays,
        })
    else:
        #print("ec2 has tags")
        for eachtag in ec2instance.tags:
            if eachtag['Key'] == 'AutoStartTime':
                #print(eachtag['Value'])
                AutoStartTime=eachtag['Value']
            if eachtag['Key'] == 'AutoStopTime':
                #print(eachtag['Value'])
                AutoStopTime=eachtag['Value']
            if eachtag['Key'] == 'AutoStartDays':
                #print(eachtag['Value'])
                AutoStartDays=eachtag['Value']
            if eachtag['Key'] == 'AutoStopDays':
                #print(eachtag['Value'])
                AutoStopDays=eachtag['Value']
        #print("tags:",instanceID,AutoStartDays,AutoStartTime,AutoStopDays,AutoStopTime)
    
        table.put_item(
            Item={
            'AccountID': accountID,
            'InstanceID': instanceID,
            'Region': region, 
            'AutoStartTime': AutoStartTime,
            'AutoStartDays': AutoStartDays,
            'AutoStopTime': AutoStopTime,
            'AutoStopDays': AutoStopDays,
        })
    
def delete_item_from_ddb(region,accountID,instanceID,tablename):
    ddb_client = connection('client','dynamodb',region)
    ddb_client.delete_item(
        TableName=tablename,
        Key={
            'AccountID' : {
                'S': accountID,
            },
            'InstanceID': {
                'S': instanceID,
            },
        }
    )
    print("item removed",instanceID)
    
    
def query_ddb(region,accountID,instanceID,tablename):
    ddb_client = connection('client','dynamodb',region)
    
    ddb_query = ddb_client.query(
            TableName=tablename,
            KeyConditions={
                'AccountID': {
                    'AttributeValueList': [
                        {
                            'S': accountID,
                        },
                    ],
                    'ComparisonOperator': 'EQ'
                },
                'InstanceID': {
                    'AttributeValueList': [
                        {
                            'S': instanceID,
                        },
                    ],
                    'ComparisonOperator': 'EQ'
                }
            }
        )
        
    return ddb_query

def instance_tag_event(accountID,access_key,secret_key,session_token,event,tablename,account_detail_table):
    
    print("instance tag event", event)
    
    region = 'eu-west-1'
    #print("region", region)
    
    for iID in event['resources']:
        instanceID=iID[iID.find("/")+1:].split()[0]
    #print("instance id", instanceID)
            
    
    conn_ec2_client = connection('client','ec2',region,access_key,secret_key,session_token)
    
    describe_instance = conn_ec2_client.describe_instances(InstanceIds=[instanceID])
    
    asg_instance_ids = autoscale_instances_list(region,access_key,secret_key,session_token)
    
    ddb_query = query_ddb(region,accountID,instanceID,tablename)
    
    for i in describe_instance['Reservations']:
        for instance_details in i['Instances']:
            if 'InstanceLifecycle' not in instance_details and instance_details['InstanceId'] not in asg_instance_ids:
                if ddb_query['Count'] < 1:
                    if 'Tags' in instance_details:
                        #print("Tags",instance_details['Tags'])
                        #print("instance is not ASG or SI & item doesnt exist in table")
                        if {'Key': 'AutoStop', 'Value': 'False'} not in instance_details['Tags']:
                            #print("instance is not ASG or SI or TI & item doesnt exist in table")
                            add_item_to_ddb(region,access_key,secret_key,session_token,instanceID,tablename,accountID,account_detail_table)
                            #print("instance details added to DDB")
                    else:
                        #print("instance is not ASG or SI & instance doesnt have any tag & item doesnt exist in table")
                        add_item_to_ddb(region,access_key,secret_key,session_token,instanceID,tablename,accountID,account_detail_table)
                        #print("instance details added to DDB")
                        
                else:
                    if 'Tags' in instance_details:
                        #print("instance is not ASG or SI & item exist in table")
                        if {'Key': 'AutoStop', 'Value': 'False'} in instance_details['Tags']:
                            #print("instance is not ASG or SI or TI & item exist in table")
                            delete_item_from_ddb(region,accountID,instanceID,tablename)
                            #print("instance details removed from DDB")
                        else:
                            #print("instance is not ASG or SI & item exist in table")
                            add_item_to_ddb(region,access_key,secret_key,session_token,instanceID,tablename,accountID,account_detail_table)
                            #print("instance details updated to DDB")
                    else:
                        #print("instance is not ASG or SI & instance doesnt have any tag & item exist in table")
                        add_item_to_ddb(region,access_key,secret_key,session_token,instanceID,tablename,accountID,account_detail_table)
                        #print("instance details added to DDB")
                        
        
   
def instance_create_delete_event(accountID,access_key,secret_key,session_token,event,tablename,account_detail_table):
    #print("create delete event", event)
    
    region = event['detail']['awsRegion']
    #print("region", region)
    
    eventName = event['detail']['eventName']
    #print("event name", eventName)
    
    for iID in (event['detail']['responseElements']['instancesSet']['items']):
        instanceID = iID['instanceId']
    #print("instance id", instanceID)
            
    
    conn_ec2_client = connection('client','ec2',region,access_key,secret_key,session_token)
    
    describe_instance = conn_ec2_client.describe_instances(InstanceIds=[instanceID])
    
    asg_instance_ids = autoscale_instances_list(region,access_key,secret_key,session_token)
    
    
    if eventName == 'RunInstances':
        print("create instance event")
        
        for i in describe_instance['Reservations']:
            for instance_details in i['Instances']:
                if 'Tags' in instance_details:
                    if 'InstanceLifecycle' not in instance_details and instance_details['InstanceId'] not in asg_instance_ids and {'Key': 'AutoStop', 'Value': 'False'} not in instance_details['Tags']:
                        #print("instance is not ASG or SI or TI and newly created")
                        add_item_to_ddb(region,access_key,secret_key,session_token,instanceID,tablename,accountID,account_detail_table)
                        ("newly created instance is added to DDB")
                else:
                    if 'InstanceLifecycle' not in instance_details and instance_details['InstanceId'] not in asg_instance_ids:
                        #print("instance is not ASG or SI and newly created and doesnt have any tag")
                        add_item_to_ddb(region,access_key,secret_key,session_token,instanceID,tablename,accountID,account_detail_table)
                        #print("newly instance details added to DDB and it doenst have any tag")
    elif eventName == 'TerminateInstances':
        #print("terminate instance event")
        
        ddb_query = query_ddb(region,accountID,instanceID,tablename)
        if ddb_query['Count'] > 0:
            #print("terminated instance details exist in DDB")
            delete_item_from_ddb(region,accountID,instanceID,tablename)
            #print("terminated instance details removed from DDB")

def get_instance_details(accountID,access_key,secret_key,session_token,tablename,account_detail_table,region='eu-west-1'):
    print("populating  instance details to DDB")
    conn_ec2_client = connection('client','ec2',region,access_key,secret_key,session_token)
    describe_instance = conn_ec2_client.describe_instances()
    asg_instance_ids = autoscale_instances_list(region,access_key,secret_key,session_token)
    #print("asg",asg_instance_ids)
    for i in describe_instance['Reservations']:
        for instance_details in i['Instances']:
            instanceID = instance_details["InstanceId"]
            if 'Tags' in instance_details:
                if ('InstanceLifecycle' not in instance_details) and (instance_details['InstanceId'] not in asg_instance_ids) and ({'Key': 'AutoStop', 'Value': 'False'} not in instance_details['Tags']):
                    #print(instanceID)
                    #print("existing instance is not ASG or SI or TI")
                    add_item_to_ddb(region,access_key,secret_key,session_token,instanceID,tablename,accountID,account_detail_table)
                    #print("existing instance is added to DDB")
            else:
                if 'InstanceLifecycle' not in instance_details and instance_details['InstanceId'] not in asg_instance_ids:
                    #print("existing instance is not ASG or SI and doesnt have any tag")
                    add_item_to_ddb(region,access_key,secret_key,session_token,instanceID,tablename,accountID,account_detail_table)
                    #print("existing instance added to DDB and it doesnst have any tag")
                        

def lambda_handler(event, context):
    tablename = 'EC2-Scheduling-Instance-Details'
    region = 'eu-west-1'
    cent_account_id = '412729112703'
    statemachine_name = 'MyStateMachine'
    cross_account_role_name = 'Ec2SchedulingCrossAccount'
    account_detail_table = 'Ec2ScheduleAccountInfo-Alpha'
    
    now = datetime.datetime.utcnow()
    start_time = now - datetime.timedelta(minutes = 15)
    end_time = now + datetime.timedelta(minutes = 15)
    end_time_only = end_time.strftime("%H:%M:%S")
    start_time_only = start_time.strftime("%H:%M:%S")
    #print("End Time =", end_time_only)
    #print("Start Time=", start_time_only)
    
    if 'source' in event:
        if event['source'] == "aws.tag":
            #print("inside tag loop")
            
            accountID = event['account']
            
            sts_client = connection('client','sts',region)
            assumedRoleObject = sts_client.assume_role(
                RoleArn='arn:aws:iam::{}:role/{}'.format(accountID,cross_account_role_name),
                RoleSessionName="AssumeRoleSession1")
            credentials = assumedRoleObject['Credentials']

                
            instance_tag_event(accountID,
                    credentials['AccessKeyId'],
                    credentials['SecretAccessKey'],
                    credentials['SessionToken'],
                    event,
                    tablename,account_detail_table)
        elif event['source'] == 'aws.ec2':
            #print("inside ec2")
            
            accountID = event['account']
            
            sts_client = connection('client','sts',region)
            assumedRoleObject = sts_client.assume_role(
                RoleArn='arn:aws:iam::{}:role/{}'.format(accountID,cross_account_role_name),
                RoleSessionName="AssumeRoleSession1")
            credentials = assumedRoleObject['Credentials']

                
            instance_create_delete_event(accountID,
                    credentials['AccessKeyId'],
                    credentials['SecretAccessKey'],
                    credentials['SessionToken'],
                    event,
                    tablename,account_detail_table)
    else:
        #print("no event, else part")
        dynamodb = connection('resource','dynamodb',region)
        table = dynamodb.Table(tablename)
        stepfunction_client = connection('client','stepfunctions',region)
        ddb_client = connection('client','dynamodb',region)
        ddb_item_count = ddb_client.scan(TableName=tablename,Select='COUNT')
    
        if ddb_item_count['Count'] < 1:
            #print("ddb is empty")
            scan_ddb = ddb_client.scan(TableName=account_detail_table)
            for acc_det in scan_ddb['Items']:
                accountID = acc_det['AccountID']['S']
        
                sts_client = connection('client','sts',region)
                assumedRoleObject = sts_client.assume_role(
                    RoleArn='arn:aws:iam::{}:role/{}'.format(accountID,cross_account_role_name),
                    RoleSessionName="AssumeRoleSession1")
                credentials = assumedRoleObject['Credentials']
                
                get_instance_details(accountID,credentials['AccessKeyId'],credentials['SecretAccessKey'],credentials['SessionToken'],tablename,account_detail_table,region='eu-west-1')
        else:
            filt_expression_start = Key('AutoStartTime').between(start_time_only, end_time_only)
            proj_expression_start = "AccountID, InstanceID, AutoStartTime, AutoStartDays"
            instances_to_start = table.scan(
                FilterExpression=filt_expression_start,
                ProjectionExpression=proj_expression_start,
            )
            
            if instances_to_start:
                for item in instances_to_start['Items']:
                    account_id = item['AccountID']
                    instance_id = item['InstanceID']
                    auto_start_time = item['AutoStartTime']
                    auto_start_days = item['AutoStartDays']
                    
                    params = {
                        'expiryseconds': '{}'.format(random.randint(5, 30)),
                        'account': account_id,
                        'instance': instance_id,
                        'start_time': auto_start_time,
                        'start_days': auto_start_days
                    }
                    logger.info(params)
                    stepfunction_client.start_execution(
                        stateMachineArn='arn:aws:states:{}:{}:stateMachine:{}'.format(region,
                                                                                      cent_account_id,
                                                                                      statemachine_name),
                        input=json.dumps(params))
                
    
            filt_expression_stop = Key('AutoStopTime').between(start_time_only, end_time_only)
            proj_expression_stop = "AccountID, InstanceID, AutoStopTime, AutoStopDays"
            instances_to_stop = table.scan(
                FilterExpression=filt_expression_stop,
                ProjectionExpression=proj_expression_stop,
            )
            
            if instances_to_stop:
                for item in instances_to_stop['Items']:
                    account_id = item['AccountID']
                    instance_id = item['InstanceID']
                    auto_stop_time = item['AutoStopTime']
                    auto_stop_days = item['AutoStopDays']
                    
                    params = {
                        'expiryseconds': '{}'.format(random.randint(5, 30)),
                        'account': account_id,
                        'instance': instance_id,
                        'stop_time': auto_stop_time,
                        'stop_days': auto_stop_days
                    }
            
                    logger.info(params)
                    stepfunction_client.start_execution(
                        stateMachineArn='arn:aws:states:{}:{}:stateMachine:{}'.format(region,
                                                                                      cent_account_id,
                                                                                      statemachine_name),
                        input=json.dumps(params))
            
            #print("start",instances_to_start['Items'])
            #print("stop",instances_to_stop['Items'])
